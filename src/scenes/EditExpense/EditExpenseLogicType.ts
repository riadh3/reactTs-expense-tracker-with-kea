// Generated by kea-typegen on Sat, 25 Feb 2023 00:32:31 GMT. DO NOT EDIT THIS FILE MANUALLY.
// @ts-nocheck

import type { Logic } from 'kea'

export interface editExpenseLogicType extends Logic {
  actionCreators: {
    fetchData: (expenseId: any) => {
      type: 'fetch data (scenes\\EditExpense\\EditExpenseLogic)'
      payload: {
        expenseId: any
      }
    }
    setExpense: (expense: any) => {
      type: 'set expense (scenes\\EditExpense\\EditExpenseLogic)'
      payload: {
        expense: any
      }
    }
    setRequestError: () => {
      type: 'set request error (scenes\\EditExpense\\EditExpenseLogic)'
      payload: {
        value: true
      }
    }
  }
  actionKeys: {
    'fetch data (scenes\\EditExpense\\EditExpenseLogic)': 'fetchData'
    'set expense (scenes\\EditExpense\\EditExpenseLogic)': 'setExpense'
    'set request error (scenes\\EditExpense\\EditExpenseLogic)': 'setRequestError'
  }
  actionTypes: {
    fetchData: 'fetch data (scenes\\EditExpense\\EditExpenseLogic)'
    setExpense: 'set expense (scenes\\EditExpense\\EditExpenseLogic)'
    setRequestError: 'set request error (scenes\\EditExpense\\EditExpenseLogic)'
  }
  actions: {
    fetchData: (expenseId: any) => void
    setExpense: (expense: any) => void
    setRequestError: () => void
  }
  asyncActions: {
    fetchData: (expenseId: any) => Promise<any>
    setExpense: (expense: any) => Promise<any>
    setRequestError: () => Promise<any>
  }
  defaults: {
    isLoading: boolean
    error: boolean
    expenseData: {}
  }
  events: {
    afterUnmount: () => void
    afterMount: () => void
  }
  key: undefined
  listeners: {
    fetchData: ((
      action: {
        type: 'fetch data (scenes\\EditExpense\\EditExpenseLogic)'
        payload: {
          expenseId: any
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['scenes\\EditExpense\\EditExpenseLogic']
  pathString: 'scenes\\EditExpense\\EditExpenseLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    isLoading: boolean
    error: boolean
    expenseData: {}
  }
  reducers: {
    isLoading: (state: boolean, action: any, fullState: any) => boolean
    error: (state: boolean, action: any, fullState: any) => boolean
    expenseData: (state: {}, action: any, fullState: any) => {}
  }
  selector: (state: any) => {
    isLoading: boolean
    error: boolean
    expenseData: {}
  }
  selectors: {
    isLoading: (state: any, props?: any) => boolean
    error: (state: any, props?: any) => boolean
    expenseData: (state: any, props?: any) => {}
  }
  sharedListeners: {}
  values: {
    isLoading: boolean
    error: boolean
    expenseData: {}
  }
  _isKea: true
  _isKeaWithKey: false
}
