// Generated by kea-typegen on Fri, 24 Feb 2023 13:28:12 GMT. DO NOT EDIT THIS FILE MANUALLY.
// @ts-nocheck

import type { Logic } from 'kea'

export interface expensesListLogicType extends Logic {
  actionCreators: {
    setOpenConfirmDeleteDialog: (id: string) => {
      type: 'set open confirm delete dialog (scenes\\ExpensesList\\ExpensesListLogic)'
      payload: {
        id: string
      }
    }
    setCloseConfirmDeleteDialog: () => {
      type: 'set close confirm delete dialog (scenes\\ExpensesList\\ExpensesListLogic)'
      payload: {
        value: true
      }
    }
    fetchData: (
      year: any,
      month: any
    ) => {
      type: 'fetch data (scenes\\ExpensesList\\ExpensesListLogic)'
      payload: {
        year: any
        month: any
      }
    }
    setExpenses: (expenses: any) => {
      type: 'set expenses (scenes\\ExpensesList\\ExpensesListLogic)'
      payload: {
        expenses: any
      }
    }
    setRequestError: () => {
      type: 'set request error (scenes\\ExpensesList\\ExpensesListLogic)'
      payload: {
        value: true
      }
    }
    deleteExpence: (id: string) => {
      type: 'delete expence (scenes\\ExpensesList\\ExpensesListLogic)'
      payload: {
        id: string
      }
    }
    editExpense: (id: string) => {
      type: 'edit expense (scenes\\ExpensesList\\ExpensesListLogic)'
      payload: {
        id: string
      }
    }
    confirmDeleteExpense: () => {
      type: 'confirm delete expense (scenes\\ExpensesList\\ExpensesListLogic)'
      payload: {
        value: true
      }
    }
  }
  actionKeys: {
    'set open confirm delete dialog (scenes\\ExpensesList\\ExpensesListLogic)': 'setOpenConfirmDeleteDialog'
    'set close confirm delete dialog (scenes\\ExpensesList\\ExpensesListLogic)': 'setCloseConfirmDeleteDialog'
    'fetch data (scenes\\ExpensesList\\ExpensesListLogic)': 'fetchData'
    'set expenses (scenes\\ExpensesList\\ExpensesListLogic)': 'setExpenses'
    'set request error (scenes\\ExpensesList\\ExpensesListLogic)': 'setRequestError'
    'delete expence (scenes\\ExpensesList\\ExpensesListLogic)': 'deleteExpence'
    'edit expense (scenes\\ExpensesList\\ExpensesListLogic)': 'editExpense'
    'confirm delete expense (scenes\\ExpensesList\\ExpensesListLogic)': 'confirmDeleteExpense'
  }
  actionTypes: {
    setOpenConfirmDeleteDialog: 'set open confirm delete dialog (scenes\\ExpensesList\\ExpensesListLogic)'
    setCloseConfirmDeleteDialog: 'set close confirm delete dialog (scenes\\ExpensesList\\ExpensesListLogic)'
    fetchData: 'fetch data (scenes\\ExpensesList\\ExpensesListLogic)'
    setExpenses: 'set expenses (scenes\\ExpensesList\\ExpensesListLogic)'
    setRequestError: 'set request error (scenes\\ExpensesList\\ExpensesListLogic)'
    deleteExpence: 'delete expence (scenes\\ExpensesList\\ExpensesListLogic)'
    editExpense: 'edit expense (scenes\\ExpensesList\\ExpensesListLogic)'
    confirmDeleteExpense: 'confirm delete expense (scenes\\ExpensesList\\ExpensesListLogic)'
  }
  actions: {
    setOpenConfirmDeleteDialog: (id: string) => void
    setCloseConfirmDeleteDialog: () => void
    fetchData: (year: any, month: any) => void
    setExpenses: (expenses: any) => void
    setRequestError: () => void
    deleteExpence: (id: string) => void
    editExpense: (id: string) => void
    confirmDeleteExpense: () => void
  }
  asyncActions: {
    setOpenConfirmDeleteDialog: (id: string) => Promise<any>
    setCloseConfirmDeleteDialog: () => Promise<any>
    fetchData: (year: any, month: any) => Promise<any>
    setExpenses: (expenses: any) => Promise<any>
    setRequestError: () => Promise<any>
    deleteExpence: (id: string) => Promise<any>
    editExpense: (id: string) => Promise<any>
    confirmDeleteExpense: () => Promise<any>
  }
  defaults: {
    currentExpenseId: string
    openConfirmDeleteDialog: boolean
    expensesList: any[]
    isLoading: boolean
    error: boolean
  }
  events: {
    afterMount: () => void
    beforeUnmount: () => void
    propsChanged: () => void
  }
  key: undefined
  listeners: {
    fetchData: ((
      action: {
        type: 'fetch data (scenes\\ExpensesList\\ExpensesListLogic)'
        payload: {
          year: any
          month: any
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
    editExpense: ((
      action: {
        type: 'edit expense (scenes\\ExpensesList\\ExpensesListLogic)'
        payload: {
          id: string
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
    confirmDeleteExpense: ((
      action: {
        type: 'confirm delete expense (scenes\\ExpensesList\\ExpensesListLogic)'
        payload: {
          value: true
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['scenes\\ExpensesList\\ExpensesListLogic']
  pathString: 'scenes\\ExpensesList\\ExpensesListLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    currentExpenseId: string
    openConfirmDeleteDialog: boolean
    expensesList: any[]
    isLoading: boolean
    error: boolean
  }
  reducers: {
    currentExpenseId: (state: string, action: any, fullState: any) => string
    openConfirmDeleteDialog: (
      state: boolean,
      action: any,
      fullState: any
    ) => boolean
    expensesList: (state: any[], action: any, fullState: any) => any[]
    isLoading: (state: boolean, action: any, fullState: any) => boolean
    error: (state: boolean, action: any, fullState: any) => boolean
  }
  selector: (state: any) => {
    currentExpenseId: string
    openConfirmDeleteDialog: boolean
    expensesList: any[]
    isLoading: boolean
    error: boolean
  }
  selectors: {
    currentExpenseId: (state: any, props?: any) => string
    openConfirmDeleteDialog: (state: any, props?: any) => boolean
    expensesList: (state: any, props?: any) => any[]
    isLoading: (state: any, props?: any) => boolean
    error: (state: any, props?: any) => boolean
  }
  sharedListeners: {}
  values: {
    currentExpenseId: string
    openConfirmDeleteDialog: boolean
    expensesList: any[]
    isLoading: boolean
    error: boolean
  }
  _isKea: true
  _isKeaWithKey: false
}
