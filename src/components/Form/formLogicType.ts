// Generated by kea-typegen on Sat, 25 Feb 2023 00:22:50 GMT. DO NOT EDIT THIS FILE MANUALLY.
// @ts-nocheck

import type { Logic } from 'kea'

import type { ExpenseFormType } from './formLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '..\..\..\node_modules\kea-forms'

export interface expenseFormLogicType extends Logic {
  actionCreators: {
    setOpenCancelDialog: () => {
      type: 'set open cancel dialog (components\\Form\\formLogic)'
      payload: {
        value: true
      }
    }
    setCloseCancelDialog: () => {
      type: 'set close cancel dialog (components\\Form\\formLogic)'
      payload: {
        value: true
      }
    }
    cancelEditForm: () => {
      type: 'cancel edit form (components\\Form\\formLogic)'
      payload: {
        value: true
      }
    }
    confirmCancelForm: () => {
      type: 'confirm cancel form (components\\Form\\formLogic)'
      payload: {
        value: true
      }
    }
    setOpenInfo: () => {
      type: 'set open info (components\\Form\\formLogic)'
      payload: {
        value: true
      }
    }
    setCloseInfo: () => {
      type: 'set close info (components\\Form\\formLogic)'
      payload: {
        value: true
      }
    }
    setRequestError: () => {
      type: 'set request error (components\\Form\\formLogic)'
      payload: {
        value: true
      }
    }
    setExpenseFormValue: (
      key: FieldName,
      value: any
    ) => {
      type: 'set expense form value (components\\Form\\formLogic)'
      payload: {
        name: FieldName
        value: any
      }
    }
    setExpenseFormValues: (values: DeepPartial<ExpenseFormType>) => {
      type: 'set expense form values (components\\Form\\formLogic)'
      payload: {
        values: DeepPartial<ExpenseFormType>
      }
    }
    setExpenseFormManualErrors: (errors: Record<string, any>) => {
      type: 'set expense form manual errors (components\\Form\\formLogic)'
      payload: {
        errors: Record<string, any>
      }
    }
    touchExpenseFormField: (key: string) => {
      type: 'touch expense form field (components\\Form\\formLogic)'
      payload: {
        key: string
      }
    }
    resetExpenseForm: (values?: ExpenseFormType) => {
      type: 'reset expense form (components\\Form\\formLogic)'
      payload: {
        values?: ExpenseFormType
      }
    }
    submitExpenseForm: () => {
      type: 'submit expense form (components\\Form\\formLogic)'
      payload: {
        value: boolean
      }
    }
    submitExpenseFormRequest: (expenseForm: ExpenseFormType) => {
      type: 'submit expense form request (components\\Form\\formLogic)'
      payload: {
        expenseForm: ExpenseFormType
      }
    }
    submitExpenseFormSuccess: (expenseForm: ExpenseFormType) => {
      type: 'submit expense form success (components\\Form\\formLogic)'
      payload: {
        expenseForm: ExpenseFormType
      }
    }
    submitExpenseFormFailure: (
      error: Error,
      errors: Record<string, any>
    ) => {
      type: 'submit expense form failure (components\\Form\\formLogic)'
      payload: {
        error: Error
        errors: Record<string, any>
      }
    }
  }
  actionKeys: {
    'set open cancel dialog (components\\Form\\formLogic)': 'setOpenCancelDialog'
    'set close cancel dialog (components\\Form\\formLogic)': 'setCloseCancelDialog'
    'cancel edit form (components\\Form\\formLogic)': 'cancelEditForm'
    'confirm cancel form (components\\Form\\formLogic)': 'confirmCancelForm'
    'set open info (components\\Form\\formLogic)': 'setOpenInfo'
    'set close info (components\\Form\\formLogic)': 'setCloseInfo'
    'set request error (components\\Form\\formLogic)': 'setRequestError'
    'set expense form value (components\\Form\\formLogic)': 'setExpenseFormValue'
    'set expense form values (components\\Form\\formLogic)': 'setExpenseFormValues'
    'set expense form manual errors (components\\Form\\formLogic)': 'setExpenseFormManualErrors'
    'touch expense form field (components\\Form\\formLogic)': 'touchExpenseFormField'
    'reset expense form (components\\Form\\formLogic)': 'resetExpenseForm'
    'submit expense form (components\\Form\\formLogic)': 'submitExpenseForm'
    'submit expense form request (components\\Form\\formLogic)': 'submitExpenseFormRequest'
    'submit expense form success (components\\Form\\formLogic)': 'submitExpenseFormSuccess'
    'submit expense form failure (components\\Form\\formLogic)': 'submitExpenseFormFailure'
  }
  actionTypes: {
    setOpenCancelDialog: 'set open cancel dialog (components\\Form\\formLogic)'
    setCloseCancelDialog: 'set close cancel dialog (components\\Form\\formLogic)'
    cancelEditForm: 'cancel edit form (components\\Form\\formLogic)'
    confirmCancelForm: 'confirm cancel form (components\\Form\\formLogic)'
    setOpenInfo: 'set open info (components\\Form\\formLogic)'
    setCloseInfo: 'set close info (components\\Form\\formLogic)'
    setRequestError: 'set request error (components\\Form\\formLogic)'
    setExpenseFormValue: 'set expense form value (components\\Form\\formLogic)'
    setExpenseFormValues: 'set expense form values (components\\Form\\formLogic)'
    setExpenseFormManualErrors: 'set expense form manual errors (components\\Form\\formLogic)'
    touchExpenseFormField: 'touch expense form field (components\\Form\\formLogic)'
    resetExpenseForm: 'reset expense form (components\\Form\\formLogic)'
    submitExpenseForm: 'submit expense form (components\\Form\\formLogic)'
    submitExpenseFormRequest: 'submit expense form request (components\\Form\\formLogic)'
    submitExpenseFormSuccess: 'submit expense form success (components\\Form\\formLogic)'
    submitExpenseFormFailure: 'submit expense form failure (components\\Form\\formLogic)'
  }
  actions: {
    setOpenCancelDialog: () => void
    setCloseCancelDialog: () => void
    cancelEditForm: () => void
    confirmCancelForm: () => void
    setOpenInfo: () => void
    setCloseInfo: () => void
    setRequestError: () => void
    setExpenseFormValue: (key: FieldName, value: any) => void
    setExpenseFormValues: (values: DeepPartial<ExpenseFormType>) => void
    setExpenseFormManualErrors: (errors: Record<string, any>) => void
    touchExpenseFormField: (key: string) => void
    resetExpenseForm: (values?: ExpenseFormType) => void
    submitExpenseForm: () => void
    submitExpenseFormRequest: (expenseForm: ExpenseFormType) => void
    submitExpenseFormSuccess: (expenseForm: ExpenseFormType) => void
    submitExpenseFormFailure: (
      error: Error,
      errors: Record<string, any>
    ) => void
  }
  asyncActions: {
    setOpenCancelDialog: () => Promise<any>
    setCloseCancelDialog: () => Promise<any>
    cancelEditForm: () => Promise<any>
    confirmCancelForm: () => Promise<any>
    setOpenInfo: () => Promise<any>
    setCloseInfo: () => Promise<any>
    setRequestError: () => Promise<any>
    setExpenseFormValue: (key: FieldName, value: any) => Promise<any>
    setExpenseFormValues: (values: DeepPartial<ExpenseFormType>) => Promise<any>
    setExpenseFormManualErrors: (errors: Record<string, any>) => Promise<any>
    touchExpenseFormField: (key: string) => Promise<any>
    resetExpenseForm: (values?: ExpenseFormType) => Promise<any>
    submitExpenseForm: () => Promise<any>
    submitExpenseFormRequest: (expenseForm: ExpenseFormType) => Promise<any>
    submitExpenseFormSuccess: (expenseForm: ExpenseFormType) => Promise<any>
    submitExpenseFormFailure: (
      error: Error,
      errors: Record<string, any>
    ) => Promise<any>
  }
  defaults: {
    openCancelDialog: boolean
    info: boolean
    isLoading: boolean
    error: boolean
    expenseForm: ExpenseFormType
    isExpenseFormSubmitting: boolean
    showExpenseFormErrors: boolean
    expenseFormChanged: boolean
    expenseFormTouches: Record<string, boolean>
    expenseFormManualErrors: Record<string, any>
  }
  events: {
    afterUnmount: () => void
    afterMount: () => void
  }
  key: undefined
  listeners: {
    cancelEditForm: ((
      action: {
        type: 'cancel edit form (components\\Form\\formLogic)'
        payload: {
          value: true
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
    confirmCancelForm: ((
      action: {
        type: 'confirm cancel form (components\\Form\\formLogic)'
        payload: {
          value: true
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['components\\Form\\formLogic']
  pathString: 'components\\Form\\formLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    openCancelDialog: boolean
    info: boolean
    isLoading: boolean
    error: boolean
    expenseForm: ExpenseFormType
    isExpenseFormSubmitting: boolean
    showExpenseFormErrors: boolean
    expenseFormChanged: boolean
    expenseFormTouches: Record<string, boolean>
    expenseFormManualErrors: Record<string, any>
  }
  reducers: {
    openCancelDialog: (state: boolean, action: any, fullState: any) => boolean
    info: (state: boolean, action: any, fullState: any) => boolean
    isLoading: (state: boolean, action: any, fullState: any) => boolean
    error: (state: boolean, action: any, fullState: any) => boolean
    expenseForm: (
      state: ExpenseFormType,
      action: any,
      fullState: any
    ) => ExpenseFormType
    isExpenseFormSubmitting: (
      state: boolean,
      action: any,
      fullState: any
    ) => boolean
    showExpenseFormErrors: (
      state: boolean,
      action: any,
      fullState: any
    ) => boolean
    expenseFormChanged: (state: boolean, action: any, fullState: any) => boolean
    expenseFormTouches: (
      state: Record<string, boolean>,
      action: any,
      fullState: any
    ) => Record<string, boolean>
    expenseFormManualErrors: (
      state: Record<string, any>,
      action: any,
      fullState: any
    ) => Record<string, any>
  }
  selector: (state: any) => {
    openCancelDialog: boolean
    info: boolean
    isLoading: boolean
    error: boolean
    expenseForm: ExpenseFormType
    isExpenseFormSubmitting: boolean
    showExpenseFormErrors: boolean
    expenseFormChanged: boolean
    expenseFormTouches: Record<string, boolean>
    expenseFormManualErrors: Record<string, any>
  }
  selectors: {
    openCancelDialog: (state: any, props?: any) => boolean
    info: (state: any, props?: any) => boolean
    isLoading: (state: any, props?: any) => boolean
    error: (state: any, props?: any) => boolean
    expenseForm: (state: any, props?: any) => ExpenseFormType
    isExpenseFormSubmitting: (state: any, props?: any) => boolean
    showExpenseFormErrors: (state: any, props?: any) => boolean
    expenseFormChanged: (state: any, props?: any) => boolean
    expenseFormTouches: (state: any, props?: any) => Record<string, boolean>
    expenseFormManualErrors: (state: any, props?: any) => Record<string, any>
    expenseFormTouched: (state: any, props?: any) => boolean
    expenseFormValidationErrors: (
      state: any,
      props?: any
    ) => DeepPartialMap<ExpenseFormType, ValidationErrorType>
    expenseFormAllErrors: (state: any, props?: any) => Record<string, any>
    expenseFormHasErrors: (state: any, props?: any) => boolean
    expenseFormErrors: (
      state: any,
      props?: any
    ) => DeepPartialMap<ExpenseFormType, ValidationErrorType>
    isExpenseFormValid: (state: any, props?: any) => boolean
  }
  sharedListeners: {}
  values: {
    openCancelDialog: boolean
    info: boolean
    isLoading: boolean
    error: boolean
    expenseForm: ExpenseFormType
    isExpenseFormSubmitting: boolean
    showExpenseFormErrors: boolean
    expenseFormChanged: boolean
    expenseFormTouches: Record<string, boolean>
    expenseFormManualErrors: Record<string, any>
    expenseFormTouched: boolean
    expenseFormValidationErrors: DeepPartialMap<
      ExpenseFormType,
      ValidationErrorType
    >
    expenseFormAllErrors: Record<string, any>
    expenseFormHasErrors: boolean
    expenseFormErrors: DeepPartialMap<ExpenseFormType, ValidationErrorType>
    isExpenseFormValid: boolean
  }
  _isKea: true
  _isKeaWithKey: false
}
